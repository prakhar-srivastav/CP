<snippet>
	<content><![CDATA[
template <class Cap> struct mf_graph
{

private:
	int  _n;
	struct _edge {
		int to, rev;
		Cap cap;

	};
	vector<pair<int, int>> pos;
	vector<vector<_edge> > g;

	void bfs(vector<int>& level, int s, int t)
	{
		fill(level.begin(), level.end(), -1);
		level[s] = 0;
		queue<int> q;
		q.push(s);
		while (!q.empty())
		{
			int v = q.front();
			q.pop();
			for (auto e : g[v])
			{
				if (e.cap == 0 || level[e.to] >= 0)
					continue;
				level[e.to] = level[v] + 1;
				if (e.to == t) return;
				q.push(e.to);
			}
		}
	}
	Cap dfs(vector<int> &level, vector<int> &iter, int v, Cap up,int s)
	{
		if (v == s) return up;
		Cap res = 0;
		int level_v = level[v];
		for (int& i = iter[v]; i < int(g[v].size()); i++) {
			_edge& e = g[v][i];
			if (level_v <= level[e.to] || g[e.to][e.rev].cap == 0) continue;
			Cap d = dfs(level, iter, e.to, min(up - res, g[e.to][e.rev].cap),s);
			if (d <= 0) continue;
			g[v][i].cap += d;
			g[e.to][e.rev].cap -= d;
			res += d;
			if (res == up) break;
		}
		return res;
	}

public:
	mf_graph() : _n(0) {}
	mf_graph(int n) : _n(n), g(n) {}


	int add_edge(int from, int to, Cap cap)
	{
		assert(0 <= from && from < _n);
		assert(0 <= to && to < _n);
		assert(cap >= 0);
		int m = (int)(pos.size());
		pos.push_back({ from,(int)(g[from].size()) });
		int from_id = (int)(g[from].size());
		int to_id = (int)(g[to].size());
		if (from == to) to_id++;
		g[from].push_back(_edge{ to, to_id, cap });
		g[to].push_back(_edge{ from,from_id,0 });
		return m;

	}
	struct edge {
		int from, to;
		Cap cap, flow;
	};

	edge get_edge(int i)
	{
		int m = int(pos.size());
		assert(0 <= i && i < m);
		auto _e = g[pos[i].first][pos[i].second];
		auto _re = g[_e.to][_e.rev];
		return edge{ pos[i].first,_e.to,_e.cap + _re.cap,_re.cap };
	}

	vector<edge> edges()
	{
		int m = int(pos.size());
		vector<edge> result;
		for (int i = 0; i < m; i++)
			result.push_back(get_edge(i));
		return result; 
	}
	void change_edge(int i, Cap new_cap, Cap new_flow)
	{
		int m = int(pos.size());
		assert(0 <= i && i < m);
		assert(0 <= new_flow && new_flow <= new_cap);
		auto& _e = g[pos[i].first][pos[i].second];
		auto& _re = g[_e.to][_e.rev];
		_e.cap = new_cap - new_flow;
		_re.cap = new_flow;
	}

	Cap flow(int s, int t)
	{
		return flow(s, t, numeric_limits<Cap>::max());
	}

	Cap flow(int s, int t, Cap flow_limit)
	{

		assert(0 <= s && s < _n);
		assert(0 <= t && t < _n);
		assert(s != t);
		vector<int> level(_n), iter(_n);
		bfs(level,s,t);
		Cap flow = 0;
		while (flow < flow_limit)
		{
			bfs(level,s,t);
			if (level[t] == -1) break;
			fill(iter.begin(), iter.end(), 0);
			while (flow < flow_limit)
			{
				Cap f = dfs(level, iter, t, flow_limit - flow, s);
					if (f == 0) break;
				flow += f;
			}

		}

		return flow;
	}

	vector<bool> min_cut(int s) {
		vector<bool> visited(_n);
		queue<int> que;
		que.push(s);
		while (!que.empty()) {
			int p = que.front();
			que.pop();
			visited[p] = true;
			for (auto e : g[p]) {
				if (e.cap && !visited[e.to]) {

					visited[e.to] = true;
					que.push(e.to);
				}
			}
		}
		return visited;
	}


};

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>max_flow</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
